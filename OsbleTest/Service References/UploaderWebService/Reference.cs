//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OsbleTest.UploaderWebService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractListing", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Services.Uploader")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsbleTest.UploaderWebService.DirectoryListing))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsbleTest.UploaderWebService.ParentDirectoryListing))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsbleTest.UploaderWebService.FileListing))]
    public partial class AbstractListing : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbsolutePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SortOrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AbsolutePath {
            get {
                return this.AbsolutePathField;
            }
            set {
                if ((object.ReferenceEquals(this.AbsolutePathField, value) != true)) {
                    this.AbsolutePathField = value;
                    this.RaisePropertyChanged("AbsolutePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryListing", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Services.Uploader")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(OsbleTest.UploaderWebService.ParentDirectoryListing))]
    public partial class DirectoryListing : OsbleTest.UploaderWebService.AbstractListing {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsbleTest.UploaderWebService.DirectoryListing[] DirectoriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsbleTest.UploaderWebService.FileListing[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OsbleTest.UploaderWebService.DirectoryListing ParentDirectoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsbleTest.UploaderWebService.DirectoryListing[] Directories {
            get {
                return this.DirectoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectoriesField, value) != true)) {
                    this.DirectoriesField = value;
                    this.RaisePropertyChanged("Directories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsbleTest.UploaderWebService.FileListing[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsbleTest.UploaderWebService.DirectoryListing ParentDirectory {
            get {
                return this.ParentDirectoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentDirectoryField, value) != true)) {
                    this.ParentDirectoryField = value;
                    this.RaisePropertyChanged("ParentDirectory");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParentDirectoryListing", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Services.Uploader")]
    [System.SerializableAttribute()]
    public partial class ParentDirectoryListing : OsbleTest.UploaderWebService.DirectoryListing {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileListing", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Services.Uploader")]
    [System.SerializableAttribute()]
    public partial class FileListing : OsbleTest.UploaderWebService.AbstractListing {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileUrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileUrl {
            get {
                return this.FileUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FileUrlField, value) != true)) {
                    this.FileUrlField = value;
                    this.RaisePropertyChanged("FileUrl");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="UploaderWebService.UploaderWebService")]
    public interface UploaderWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/DeleteFile", ReplyAction="urn:UploaderWebService/DeleteFileResponse")]
        bool DeleteFile(string file, int courseId, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/DeleteFile", ReplyAction="urn:UploaderWebService/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string file, int courseId, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFakeFileListing", ReplyAction="urn:UploaderWebService/GetFakeFileListingResponse")]
        OsbleTest.UploaderWebService.FileListing GetFakeFileListing();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFakeFileListing", ReplyAction="urn:UploaderWebService/GetFakeFileListingResponse")]
        System.Threading.Tasks.Task<OsbleTest.UploaderWebService.FileListing> GetFakeFileListingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFakeDirectoryListing", ReplyAction="urn:UploaderWebService/GetFakeDirectoryListingResponse")]
        OsbleTest.UploaderWebService.DirectoryListing GetFakeDirectoryListing();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFakeDirectoryListing", ReplyAction="urn:UploaderWebService/GetFakeDirectoryListingResponse")]
        System.Threading.Tasks.Task<OsbleTest.UploaderWebService.DirectoryListing> GetFakeDirectoryListingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFakeParentDirectoryListing", ReplyAction="urn:UploaderWebService/GetFakeParentDirectoryListingResponse")]
        OsbleTest.UploaderWebService.ParentDirectoryListing GetFakeParentDirectoryListing();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFakeParentDirectoryListing", ReplyAction="urn:UploaderWebService/GetFakeParentDirectoryListingResponse")]
        System.Threading.Tasks.Task<OsbleTest.UploaderWebService.ParentDirectoryListing> GetFakeParentDirectoryListingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFileList", ReplyAction="urn:UploaderWebService/GetFileListResponse")]
        OsbleTest.UploaderWebService.DirectoryListing GetFileList(int courseId, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFileList", ReplyAction="urn:UploaderWebService/GetFileListResponse")]
        System.Threading.Tasks.Task<OsbleTest.UploaderWebService.DirectoryListing> GetFileListAsync(int courseId, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFileUrl", ReplyAction="urn:UploaderWebService/GetFileUrlResponse")]
        string GetFileUrl(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetFileUrl", ReplyAction="urn:UploaderWebService/GetFileUrlResponse")]
        System.Threading.Tasks.Task<string> GetFileUrlAsync(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetLastModifiedDate", ReplyAction="urn:UploaderWebService/GetLastModifiedDateResponse")]
        System.DateTime GetLastModifiedDate(string fileName, int courseId, string relativePath, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetLastModifiedDate", ReplyAction="urn:UploaderWebService/GetLastModifiedDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetLastModifiedDateAsync(string fileName, int courseId, string relativePath, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetValidUploadLocations", ReplyAction="urn:UploaderWebService/GetValidUploadLocationsResponse")]
        System.Collections.Generic.Dictionary<int, string> GetValidUploadLocations(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/GetValidUploadLocations", ReplyAction="urn:UploaderWebService/GetValidUploadLocationsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetValidUploadLocationsAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/IsValidKey", ReplyAction="urn:UploaderWebService/IsValidKeyResponse")]
        bool IsValidKey(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/IsValidKey", ReplyAction="urn:UploaderWebService/IsValidKeyResponse")]
        System.Threading.Tasks.Task<bool> IsValidKeyAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/PostActivityMessage", ReplyAction="urn:UploaderWebService/PostActivityMessageResponse")]
        bool PostActivityMessage(string message, int courseId, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/PostActivityMessage", ReplyAction="urn:UploaderWebService/PostActivityMessageResponse")]
        System.Threading.Tasks.Task<bool> PostActivityMessageAsync(string message, int courseId, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/PrepCurrentPath", ReplyAction="urn:UploaderWebService/PrepCurrentPathResponse")]
        bool PrepCurrentPath(OsbleTest.UploaderWebService.DirectoryListing dirList, int courseId, string relativePathStart, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/PrepCurrentPath", ReplyAction="urn:UploaderWebService/PrepCurrentPathResponse")]
        System.Threading.Tasks.Task<bool> PrepCurrentPathAsync(OsbleTest.UploaderWebService.DirectoryListing dirList, int courseId, string relativePathStart, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/SyncFile", ReplyAction="urn:UploaderWebService/SyncFileResponse")]
        bool SyncFile(string fileName, byte[] data, int courseId, string relativePath, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/SyncFile", ReplyAction="urn:UploaderWebService/SyncFileResponse")]
        System.Threading.Tasks.Task<bool> SyncFileAsync(string fileName, byte[] data, int courseId, string relativePath, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/UpdateListingOrder", ReplyAction="urn:UploaderWebService/UpdateListingOrderResponse")]
        void UpdateListingOrder(OsbleTest.UploaderWebService.DirectoryListing listing, int courseId, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/UpdateListingOrder", ReplyAction="urn:UploaderWebService/UpdateListingOrderResponse")]
        System.Threading.Tasks.Task UpdateListingOrderAsync(OsbleTest.UploaderWebService.DirectoryListing listing, int courseId, string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/ValidateUser", ReplyAction="urn:UploaderWebService/ValidateUserResponse")]
        string ValidateUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:UploaderWebService/ValidateUser", ReplyAction="urn:UploaderWebService/ValidateUserResponse")]
        System.Threading.Tasks.Task<string> ValidateUserAsync(string userName, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UploaderWebServiceChannel : OsbleTest.UploaderWebService.UploaderWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploaderWebServiceClient : System.ServiceModel.ClientBase<OsbleTest.UploaderWebService.UploaderWebService>, OsbleTest.UploaderWebService.UploaderWebService {
        
        public UploaderWebServiceClient() {
        }
        
        public UploaderWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploaderWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploaderWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploaderWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DeleteFile(string file, int courseId, string authToken) {
            return base.Channel.DeleteFile(file, courseId, authToken);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string file, int courseId, string authToken) {
            return base.Channel.DeleteFileAsync(file, courseId, authToken);
        }
        
        public OsbleTest.UploaderWebService.FileListing GetFakeFileListing() {
            return base.Channel.GetFakeFileListing();
        }
        
        public System.Threading.Tasks.Task<OsbleTest.UploaderWebService.FileListing> GetFakeFileListingAsync() {
            return base.Channel.GetFakeFileListingAsync();
        }
        
        public OsbleTest.UploaderWebService.DirectoryListing GetFakeDirectoryListing() {
            return base.Channel.GetFakeDirectoryListing();
        }
        
        public System.Threading.Tasks.Task<OsbleTest.UploaderWebService.DirectoryListing> GetFakeDirectoryListingAsync() {
            return base.Channel.GetFakeDirectoryListingAsync();
        }
        
        public OsbleTest.UploaderWebService.ParentDirectoryListing GetFakeParentDirectoryListing() {
            return base.Channel.GetFakeParentDirectoryListing();
        }
        
        public System.Threading.Tasks.Task<OsbleTest.UploaderWebService.ParentDirectoryListing> GetFakeParentDirectoryListingAsync() {
            return base.Channel.GetFakeParentDirectoryListingAsync();
        }
        
        public OsbleTest.UploaderWebService.DirectoryListing GetFileList(int courseId, string authToken) {
            return base.Channel.GetFileList(courseId, authToken);
        }
        
        public System.Threading.Tasks.Task<OsbleTest.UploaderWebService.DirectoryListing> GetFileListAsync(int courseId, string authToken) {
            return base.Channel.GetFileListAsync(courseId, authToken);
        }
        
        public string GetFileUrl(string fileName) {
            return base.Channel.GetFileUrl(fileName);
        }
        
        public System.Threading.Tasks.Task<string> GetFileUrlAsync(string fileName) {
            return base.Channel.GetFileUrlAsync(fileName);
        }
        
        public System.DateTime GetLastModifiedDate(string fileName, int courseId, string relativePath, string authToken) {
            return base.Channel.GetLastModifiedDate(fileName, courseId, relativePath, authToken);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetLastModifiedDateAsync(string fileName, int courseId, string relativePath, string authToken) {
            return base.Channel.GetLastModifiedDateAsync(fileName, courseId, relativePath, authToken);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetValidUploadLocations(string authToken) {
            return base.Channel.GetValidUploadLocations(authToken);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetValidUploadLocationsAsync(string authToken) {
            return base.Channel.GetValidUploadLocationsAsync(authToken);
        }
        
        public bool IsValidKey(string authToken) {
            return base.Channel.IsValidKey(authToken);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidKeyAsync(string authToken) {
            return base.Channel.IsValidKeyAsync(authToken);
        }
        
        public bool PostActivityMessage(string message, int courseId, string authToken) {
            return base.Channel.PostActivityMessage(message, courseId, authToken);
        }
        
        public System.Threading.Tasks.Task<bool> PostActivityMessageAsync(string message, int courseId, string authToken) {
            return base.Channel.PostActivityMessageAsync(message, courseId, authToken);
        }
        
        public bool PrepCurrentPath(OsbleTest.UploaderWebService.DirectoryListing dirList, int courseId, string relativePathStart, string authToken) {
            return base.Channel.PrepCurrentPath(dirList, courseId, relativePathStart, authToken);
        }
        
        public System.Threading.Tasks.Task<bool> PrepCurrentPathAsync(OsbleTest.UploaderWebService.DirectoryListing dirList, int courseId, string relativePathStart, string authToken) {
            return base.Channel.PrepCurrentPathAsync(dirList, courseId, relativePathStart, authToken);
        }
        
        public bool SyncFile(string fileName, byte[] data, int courseId, string relativePath, string authToken) {
            return base.Channel.SyncFile(fileName, data, courseId, relativePath, authToken);
        }
        
        public System.Threading.Tasks.Task<bool> SyncFileAsync(string fileName, byte[] data, int courseId, string relativePath, string authToken) {
            return base.Channel.SyncFileAsync(fileName, data, courseId, relativePath, authToken);
        }
        
        public void UpdateListingOrder(OsbleTest.UploaderWebService.DirectoryListing listing, int courseId, string authToken) {
            base.Channel.UpdateListingOrder(listing, courseId, authToken);
        }
        
        public System.Threading.Tasks.Task UpdateListingOrderAsync(OsbleTest.UploaderWebService.DirectoryListing listing, int courseId, string authToken) {
            return base.Channel.UpdateListingOrderAsync(listing, courseId, authToken);
        }
        
        public string ValidateUser(string userName, string password) {
            return base.Channel.ValidateUser(userName, password);
        }
        
        public System.Threading.Tasks.Task<string> ValidateUserAsync(string userName, string password) {
            return base.Channel.ValidateUserAsync(userName, password);
        }
    }
}
